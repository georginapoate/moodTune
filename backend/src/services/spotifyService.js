// backend/services/spotifyService.js
const SpotifyWebApi = require('spotify-web-api-node');

/**
 * Takes a list of recommended songs, finds them on Spotify, and creates a playlist.
 * @param {string} accessToken - The user's Spotify access token.
 * @param {Array<{artist: string, title: string}>} recommendedSongs - The list of songs from our database.
 * @param {string} prompt - The user's original prompt for the playlist name.
 * @returns {Promise<string>} The URL of the newly created playlist.
 */

function getSpotifyApi(accessToken) {
  return new SpotifyWebApi({ accessToken });
}

const createSpotifyAuthorizeURL = (clientId, redirectUri, scopes) => {
  const spotifyApi = new SpotifyWebApi({
    clientId: clientId,
    redirectUri: redirectUri,
  });
  return spotifyApi.createAuthorizeURL(scopes);
};

const refreshAccessToken = async (refreshToken, clientId, clientSecret) => {
  const spotifyApi = new SpotifyWebApi({
    clientId,
    clientSecret,
  });

  spotifyApi.setRefreshToken(refreshToken);

  try {
    const data = await spotifyApi.refreshAccessToken();
    return {
      accessToken: data.body['access_token'],
      expiresIn: data.body['expires_in'], // usually 3600s
    };
  } catch (error) {
    console.error('\nError refreshing Spotify access token:', error.body || error);
    throw new Error('Failed to refresh Spotify access token.');
  }
};


const getSpotifyTokens = async (code, clientId, clientSecret, redirectUri) => {
  const spotifyApi = new SpotifyWebApi({
    clientId: clientId,
    clientSecret: clientSecret,
    redirectUri: redirectUri,
  });
  try {
    const data = await spotifyApi.authorizationCodeGrant(code);
    return {
      accessToken: data.body['access_token'],
      refreshToken: data.body['refresh_token'],
    };
  } catch (error) {
    console.error('\nError from Spotify API (body):', error.body);
    throw new Error(error.body ? JSON.stringify(error.body) : error.message);
  }
};

const searchTrackOnSpotify = async (spotifyApi, artist, title) => {
  const q = `track:${title} artist:${artist}`;
  try {
    const result = await spotifyApi.searchTracks(q, { limit: 1 });
    const item = result?.body?.tracks?.items?.[0];
    if (!item) return null;

    return {
      spotifyUri: item.uri,
      spotifyTrackId: item.id,
      previewUrl: item.preview_url,
      album: item.album?.name || null,
      albumImage: item.album?.images?.[0]?.url || null,
      spotifyExternalUrl: item.external_urls?.spotify || null,
      artists: item.artists.map(a => a.name).join(', ')
    };
  } catch (err) {
    console.error('searchTrackOnSpotify error:', err?.message || err.body);
    throw err;
  }
};
const createPlaylistFromTracks = async (accessToken, recommendedSongs, prompt) => {
  const spotifyApi = getSpotifyApi(accessToken);

  try {
    console.log('Spotify Service: Creating the Spotify playlist...');

    const searchResults = await Promise.all(
      recommendedSongs.map(song => searchTrackOnSpotify(spotifyApi, song.artist, song.title))
    );

    const invalidTracks = searchResults.filter(track => !track || !track.spotifyUri);
    if (invalidTracks.length > 0) {
      console.warn(` > ${invalidTracks.length} track(s) could not be found on Spotify.`);
    }

    const validTracks = searchResults.filter(track => track && track.spotifyUri);
    const trackUris = validTracks.map(track => track.spotifyUri);

    if (trackUris.length === 0) {
      throw new Error('No valid Spotify track URIs found for this playlist.');
    }

    const me = await spotifyApi.getMe();
    const userId = me?.body?.id;
    if (!userId) throw new Error('Could not retrieve user ID from Spotify.');

    const playlistResponse = await spotifyApi.createPlaylist(userId, {
      name: prompt || 'New povTunes Playlist',
      description: `Generated by povTunes for the prompt: ${prompt}`,
      public: false
    });

    const playlistId = playlistResponse.body.id;
    console.log(` > Created playlist "${playlistResponse.body.name}" (ID: ${playlistId})`);

    // Add tracks in batches of 100 (Spotify limit)
    const batchSize = 100;
    for (let i = 0; i < trackUris.length; i += batchSize) {
      const batch = trackUris.slice(i, i + batchSize);
      await spotifyApi.addTracksToPlaylist(playlistId, batch);
    }

    console.log(' > Tracks added successfully.');
    return {
      playlistId,
      playlistUrl: playlistResponse.body.external_urls.spotify,
      tracks: validTracks
    };

  } catch (error) {
    console.error('\nError creating playlist or adding tracks:', error);
    if (error.body?.error) console.error('Spotify API Response Error:', error.body.error);
    throw new Error('Failed to create playlist on Spotify. Please check your access token and song data.');
  }
};


module.exports = {
  getSpotifyApi,
  createSpotifyAuthorizeURL,
  getSpotifyTokens,
  refreshAccessToken,
  createPlaylistFromTracks,
  searchTrackOnSpotify,
};