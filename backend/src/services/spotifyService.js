// backend/services/spotifyService.js
const SpotifyWebApi = require('spotify-web-api-node');

/**
 * Takes a list of recommended songs, finds them on Spotify, and creates a playlist.
 * @param {string} accessToken - The user's Spotify access token.
 * @param {Array<{artist: string, title: string}>} recommendedSongs - The list of songs from our database.
 * @param {string} prompt - The user's original prompt for the playlist name.
 * @returns {Promise<string>} The URL of the newly created playlist.
 */

function getSpotifyApi(accessToken) {
  return new SpotifyWebApi({ accessToken });
}

const createSpotifyAuthorizeURL = (clientId, redirectUri, scopes) => {
  const spotifyApi = new SpotifyWebApi({
    clientId: clientId,
    redirectUri: redirectUri,
  });
  return spotifyApi.createAuthorizeURL(scopes);
};

const getSpotifyTokens = async (code, clientId, clientSecret, redirectUri) => {
  const spotifyApi = new SpotifyWebApi({
    clientId: clientId,
    clientSecret: clientSecret,
    redirectUri: redirectUri,
  });
  try {
    const data = await spotifyApi.authorizationCodeGrant(code);
    return {
      accessToken: data.body['access_token'],
      refreshToken: data.body['refresh_token'],
    };
  } catch (error) {
    console.error('\nError from Spotify API (body):', error.body);
    throw new Error(error.body ? JSON.stringify(error.body) : error.message);
  }
};


const isSpotifyPremium = async (accessToken) => {
  const spotifyApi = getSpotifyApi(accessToken);
  try {
    const data = await spotifyApi.getMe();
    const product = data.body.product;
    console.log(product);
    return product === 'premium';
  } catch (error) {
    console.error('Error in isSpotifyPremium:', error);
    return false;
  }
}

const searchTrackOnSpotify = async (spotifyApi, artist, title) => {
  const q = `track:${title} artist:${artist}`;
  try {
    const result = await spotifyApi.searchTracks(q, { limit: 1 });
    const item = result?.body?.tracks?.items?.[0];
    if (!item) return null;

    return {
      spotifyUri: item.uri,
      spotifyTrackId: item.id,
      previewUrl: item.preview_url,
      album: item.album?.name || null,
      albumImage: item.album?.images?.[0]?.url || null,
      spotifyExternalUrl: item.external_urls?.spotify || null,
      artists: item.artists.map(a => a.name).join(', ')
    };
  } catch (err) {
    console.error('searchTrackOnSpotify error:', err?.message || err);
    return null;
  }
};

const createPlaylistFromTracks = async (accessToken, recommendedSongs, prompt) => {
  const spotifyApi = getSpotifyApi(accessToken);

  try {
    console.log('Spotify Service: Creating the Spotify playlist...');

    const searchResults = await Promise.all(
      recommendedSongs.map(song => searchTrackOnSpotify(spotifyApi, song.artist, song.title))
    );

    const validTracks = searchResults.filter(track => track && track.spotifyUri);
    const trackUris = validTracks.map(track => track.spotifyUri);

    console.log(` > Found ${trackUris.length} valid Spotify track URIs.`);

    if (trackUris.length === 0) {
      throw new Error('No valid Spotify track URIs found for this playlist.');
    }


    // Step 2: Get the current user's ID
    const me = await spotifyApi.getMe();
    const userId = me?.body?.id || me?.id;
    console.log(` > Retrieved user ID: ${userId}`);

    if (!userId) {
      throw new Error('Could not retrieve user ID from Spotify. Check access token and scopes.');
    }

    // Step 3: Create a new playlist
    const playlistOptions = {
      name: prompt,
      description: `Generated by MoodTunes for the prompt ${prompt}`,
      public: false
    }
    const playlistResponse = await spotifyApi.createPlaylist(userId, playlistOptions);
    const playlistId = playlistResponse.body.id;

    console.log(` > Created playlist "${playlistResponse.name}" (ID: ${playlistId})`);

    // Step 4: Add tracks to the new playlist
    await spotifyApi.addTracksToPlaylist(playlistId, trackUris);
    console.log(' > Tracks added successfully.');

    // Step 5: Return the URL of the new playlist
    return {
      playlistId,
      playlistUrl: playlistResponse.body.external_urls.spotify,
      tracks: validTracks
    };

  } catch (error) {
    console.error('\nError creating playlist or adding tracks:', error);

    if (error.body) {
      console.error('Spotify API Response Error:', error.body.error);
    }

    throw new Error('Failed to create playlist on Spotify. Please check your access token and song data.');
  }
};


const deletePlaylist = async (accessToken, playlistId) => {
  const spotifyApi = getSpotifyApi(accessToken);
  console.log(`Spotify Service: Deleting playlist with ID: ${playlistId}`);
  // Spotify's term for deleting a playlist is "unfollowing" it.
  await spotifyApi.unfollowPlaylist(playlistId);
  console.log(' > Playlist successfully deleted (unfollowed).');
};

module.exports = {
  getSpotifyApi,
  createSpotifyAuthorizeURL,
  getSpotifyTokens,
  isSpotifyPremium,
  createPlaylistFromTracks,
  searchTrackOnSpotify,
  deletePlaylist,
};