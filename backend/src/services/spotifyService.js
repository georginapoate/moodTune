// backend/services/spotifyService.js
const SpotifyWebApi = require('spotify-web-api-node');

/**
 * Takes a list of recommended songs, finds them on Spotify, and creates a playlist.
 * @param {string} accessToken - The user's Spotify access token.
 * @param {Array<{artist: string, title: string}>} recommendedSongs - The list of songs from our database.
 * @param {string} prompt - The user's original prompt for the playlist name.
 * @returns {Promise<string>} The URL of the newly created playlist.
 */

function getSpotifyApi(accessToken) {
  return new SpotifyWebApi({ accessToken });
}

const searchTrackOnSpotify = async (accessToken, artist, title) => {
  const spotifyApi = getSpotifyApi(accessToken);
  const q = `track:${title} artist:${artist}`;
  try {
    const result = await spotifyApi.searchTracks(q, { limit: 1 });
    const item = result?.body?.tracks?.items?.[0];
    if (!item) return null;

    return {
      spotifyUri: item.uri,
      spotifyTrackId: item.id,
      previewUrl: item.preview_url,
      album: item.album?.name || null,
      albumImage: item.album?.images?.[0]?.url || null,
      spotifyExternalUrl: item.external_urls?.spotify || null,
      artists: item.artists.map(a => a.name).join(', ')
    };
  } catch (err) {
    console.error('searchTrackOnSpotify error:', err?.message || err);
    return null;
  }
};

const createPlaylistFromTracks = async (accessToken, recommendedSongs, prompt) => {
  const spotifyApi = getSpotifyApi(accessToken);

  console.log('Spotify Service: Creating the Spotify playlist...');
  const trackUris = [];
  
  for (const song of recommendedSongs) {
    if (song.spotifyUri) {
      trackUris.push(song.spotifyUri);
      continue;
    }
    if (song.spotifyTrackId) {
      trackUris.push(`spotify:track:${song.spotifyTrackId}`);
      continue;
    }

    const found = await searchTrackOnSpotify(accessToken, song.artist, song.title);
    if (found && found.spotifyUri) {
      trackUris.push(found.spotifyUri);
    } else {
      console.warn(`Could not find on Spotify: ${song.artist} - ${song.title}`);
    }
  }

  if (trackUris.length === 0) {
    throw new Error('Could not locate any of the recommended songs on Spotify.');
  }
  console.log(` > Found ${trackUris.length} Spotify track URIs.`);

  // Step 2: Get the current user's ID
  const me = await spotifyApi.getMe();
  const userId = me?.body?.id;

  // Step 3: Create a new playlist
  const playlistName = `MoodTunes: ${prompt.substring(0, 50)}`;
  const newPlaylist = await spotifyApi.createPlaylist(userId, playlistName, {
    description: `Generated by MoodTunes for the prompt: "${prompt}"`,
    public: false,
  });

  console.log(` > Created playlist "${newPlaylist.body.name}"`);

  // Step 4: Add tracks to the new playlist
  await spotifyApi.addTracksToPlaylist(newPlaylist.body.id, trackUris);
  console.log(' > Tracks added successfully.');

  // Step 5: Return the URL of the new playlist
  return newPlaylist.body.external_urls.spotify;
};

const deletePlaylist = async (accessToken, playlistId) => {
  const spotifyApi = getSpotifyApi(accessToken);
  console.log(`Spotify Service: Deleting playlist with ID: ${playlistId}`);
  // Spotify's term for deleting a playlist is "unfollowing" it.
  await spotifyApi.unfollowPlaylist(playlistId);
  console.log(' > Playlist successfully deleted (unfollowed).');
};

module.exports = {
  createPlaylistFromTracks,
  deletePlaylist,
};